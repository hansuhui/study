
Form : 전송되어 온 폼의 요소값 (post 방식)

QueryString : 전송되어 온 폼의 요소값 (get 방식)

Cookies : 하이퍼링크 부분으로 전송된 값

Server Variables :HTTP 헤더와 함께 전송된 쿠키의 값

ClientCertificate : 서버의 환경변수들의 값

TotalBytes : 현재 요청시 클라이언트가 보내는 바이트의 수

BinaryRead : Post 요청의 일부분으로 서버에 보내는 데이터를 불러내는 데 사용


[QueryString 콜렉션]

1) Get 방식

Request 개체에서 가장 많이 , 빈번하게 쓰이는 컬렉션이 바로 QueryString , Form 콜렉션이다.
이 두개의 컬렉션으로 전송이 된 값을 얻어올 수가 있다. 먼저 QueryString에 대해서 알아보자



[콜렉션 이란?]

ASP에서의 콜렉션(Collection)이란 배열과 비슷한 구조를 가지고 있으며, 각 요소와 키(Key)값을 이용해
값을 저장할 수 있는 데이터 구조를 의미한다. 배열보다는 다방면으로 사용되는 강력한 기능을 가지고 있으며,
키 값을 알면 콜렉션에 데이터를 넣거나 가져올 수가 있다.


2)Post 방식

Post 방식은 전송할 정보를 HTTP 헤더 안에 포함시켜 전송하는 방법으로, 이 방법이 전적으로
안전을 보장해 주는것은 아니지만, 최소한 Get 방식보다는 나은 것이다.


[Request 방식]

Request 객체를 이용하는 경우에는 사실 Request.QueryString .Request.Form과 같이
길게 코딩하지 않고 그냥 Request만 사용해도 문제가 발생하지 않는다. 예를 들어, 어떤 폼에서
table 이라는 컨트롤에 들어있는 값을 가져오기를 원하는 경우, 그냥 Reqeust("table")라고 코딩하면,
자동으로 QueryString으로 값을 찾아보고, 이 방식으로 찾는 table이 없으면, 다음으로 Form으로 찾아서
그 값을 가져오게 된다. 그러나, 즉 QueryString으로도 Form으로도 찾아지는 키가 존재하는 경우에는
우리가 원하지 않는 엉뚱한 결과를 가져올 수도 있음으로 이것만 주의한다면 그냥 Request("..")방법을
사용해도 전혀 문제가 되지 않는다. 이렇게 짧게 코딩하면 스크립트 해석 
처리시간이 단축되어 여러 가지로 장점이 있다.



[ServerVariable 콜렉션]

현재 서버 및 클라이언트 정보를 저장하고 있는 콜렉션으로, 대부분 사용자의 브라우저에서 보내온
HTTP 헤더를이 콜렉션을 통하여 알아낼 수 있다. 만일 현재 접속한 사람의 브라우저와 OS를 알고 싶다면
HTTP_USER_AGENT라는 키를 이용하면 되고 , IP 주소를 알고 싶다면 REMOTE_HOST라는 키를 통해 얻어낼 수가 있다.












