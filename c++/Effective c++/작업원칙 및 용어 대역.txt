implementation : 구현환경 
-정확한 의미는 "표준 명세를 구현하여 만든, 프로그램을 수행하고 함수의 실행을 지원하는 개발
환경으로 , 특별한 제어 옵션 아래에서 실행되는 프로그램 개발 소프트웨어(컴파일러/링커/표준라이브러리
/운영체제)의 집합"을 가르킨다. 간단히 말해 언어 표준안에서 제시하는 명세를 해석하고 만든 결과라는
뜻이며 , 공급자(vendor)중심의 의미를 담고 있다. 
다른책에서는 흔히 '컴파일러'라고 말하고 있고, '플랫폼' 혹은 '구현물'로 나와 있는 국내외
문헌도 있으며, 어떤 국내서는 사전 의미를 확정하거나 적당한 대역어를 찾지 모해서 '구현' 혹은
'임플리멘테이션'이라고 옮기는 경우도 있다.

undefined : 미정의 사항 , 정의되지 않은
-표준에서 undefined는 이식성이 없거나 잘못된 프로그램 구조 혹은 에러가 있는 데이터나
값이 불확실한 개체의 사용에 의존하는 동작(behavior)으로, 표준에서는 어떠한 요구도 하지
않는 사항이다. 

implementation-defined : 구현별 정의 사항, 구현별 의존 사항, 구현에따라 다른 , 구현에 의존적인
-implementation-defined의 정확한 의미는 "표준에서는 정확히 한 가지를 정하지 않고 여러가지
가능성을 제시하며 , 구현에 따라 다르게 결정되는 사항"이라는 뜻이다.



[용어 대역표]

1.문자에 대한 대역 용어
carriage return (/r)    /  리턴
horizontal tab(/t)	/ 수평탭
newline(/n)		/ 줄바꿈문자
space			/ 스페이스
whitespace		/ 공백 문자

2.전체 대역 용어
(타입 변환)
cast			/ 캐스트
explicit type conversion / 명시적 타입 변환
implicit type conversion / 암시적 타입 변환

(타입 제약)
strongly typed 		/타입 제약이 엄격한
weakly typed 		/ 타입 제약이 약한

(연산자)
operand			/ 피연산자
operator		/ 연산자
postfix operator	/ 후위 연산자
prefix operator		/ 전위 연산자

(언어 명세 관련)
construct		/ 구문요소, 문법요소
implementation		/ 구현환경
implementation-defined  / 구현별 정의사항, 구현에 따라 다른, 구현별 의존사항
language definition     / 언어 정의 사항
language facilty	/ 언어기능
language feature	/ 언어특징
undefined		/ 미정의 사항, 정의되지 않음
undefined behavior	/ 미정의 동작


(예외)
basic exception safety guarantee / 기본적인 예외 안정성 보장
catch			/ (예외를) 받아내다
exception handler	/ 예외 처리자
exception safety	/ 예외 안전성
exception specification / 예외 지정
propagate		/ (예외를) 전파하다 (re-throw와 같은 의미)
re-throw		/ (예외를) 재전송하다 , 다시 던지다
strong exception safety huarentee / 강력한 예외 안정성 보장
throw 			/ (예외를) 던지다(동작), 발상하다 (상태)

(클래스)
abstract class		/ 추상 클래스
construct		/ (객체를) 생성하다
create			/ (객체를) 생성하다
delete			/ (객체를) 삭제하다
destroy			/ (객체를) 소멸시키다
hierarchy		/ 클래스 계통
invariant		/ 불변속성
leaf class		/ 리프 클래스
member initialization list / 멤버 초기화 리스트
method			/ 메소드
non-member		/ 비멤버, 클래스 멤버가 아닌
root class		/ 루트 클래스 , 최상위 클래스

(프로그래밍 스타일)
generic programming	/ 일반화 프로그래밍
object-oriented programming / 객체 지향 프로그래밍
procedural programmgin  / 절차적 프로그래밍

(포인터)
const pointer to object / 객체 상수 포인터
pointer to const object / 상수 객체 포인터
pointer to function	/ 함수 포인터
pointer to member	/ 멤버 포인터
untyped pointer		/ 타입미정 포인터

(클래스 멤버)
const member		/ 상수 멤버
private member		/ private 멤버
protected member	/ protected 멤버
public member		/ public 멤버
static member		/ 정적 멤버

(STL, C++ 표준 라이브러리)
adapter			/ 어댑터
algorithm		/ 알고리즘
assiciative container	/ 연관 컨테이너
bitset			/ 비트세트
capacity		/ 용량
const iterator		/ 상수 반복자
dependent type		/ 의존타입
deque			/ 데크
element			/ 원소
forward iterator	/ 순방향 반복자
function object		/ 함수 객체
functor			/ 함수자
generalization		/ 일반화
generic			/ 일반화(수식어로 사용됨)
hash_map		/ 해시맵
hash_set		/ 해시세트
hashed pointer		/ 해시 포인터
instance		/ 인스턴스
iterator		/ 반복자
list			/ 리스트 , 이중 연결 리스트
locale			/ 로케일
map			/ 맵
multimap		/ 멀티맵
multiset		/ 멀티세트
pair			/ 페어
random access iterator  / 임의 접근 반복자
range			/ 범위
reverse iterator	/ 역방향 반복자
sequence container	/ 시퀀스 컴테이너
sequence		/ 시퀀스
set			/ 세트
slist			/ 단일 연결 리스트
string			/ 스트링, 문자열
template		/ 템플릿
traits			/ 특성정보
valarray		/ 수치배열
vector			/ 벡터

(디자인 패턴 : GoF 패턴에 대한 우리말 표기)
Creational Pattern	/ 생성 패턴
Template Method		/ 템플릿 메서드
Strategy		/ 전략
Observer		/ 감시자
Visitor			/ 방문자

(프로그래밍 일반)
(알고리즘) constant time / 상수시간
(알고리즘) linear	 / 선형 (알고리즘)
(알고리즘) linear time   / 선형시간
(알고리즘) logarithmic	 / 로그시간
algorithm		 / 알고리즘
allocator		 / 할당자
application		 / 응용프로그램, 응용(실제 동작)
argument		 / 인자
assert(ion)		 / 단정(문)
binary			 / 이항
built-in operator	 / 기본제공 연산자
built-in type		 / 기본제공 타입
cache			 / 캐시
callback		 / 콜백
callee			 / 피호출부, 호출된 함수
chunk			 / 메모리 덩어리
clause			 / 절
complexity		 / 복잡도
component		 / 구송요소
composition		 / 합성(객체)
compositor		 / 합성자
concurrency		 / 병행성
const			 / 상수 (객체, 멤버 및 수량 데이터에 대해)
constness		 / 상수성
constuctor		 / 생성자
convention		 / 규약
covariance		 / 공변성
covariant		 / 공변
data abstraction	 / 데이터 추상화
deduction		 / 추론
dependent name		 / 의존이름
destructor		 / 소멸자
directed acyclic graph   / 방향성 비순환 그래프
directed graph		 / 방향성 그래프
entity			 / 개체
evaluation		 / 평가(표현식을 처리한 결과 값을 내는 동작)
explicit		 / explicit(c++ 키워드), 명시적(c++ 키워드가 아닌 경우), 명시호출(명시호출 생성자의 경우)
explicit constructor	 / 명시호출 생성자
expression		 / 표현식
family of XXX		 / 동일 계열의 XXX군
free store		 / 자유 저장공간
generative programming	 / 생성식 프로그래밍
global object		 / 전역 객체
high-level		 / 고차원의, 상위(부) 수준의
higher-order		 / 고차
immediate operand	 / 즉치 피연산자
implicit		 / 암시적(컴파일러의 추론에 의한, 내부적인)
incremental compilation  / 증분 컴파일
index			 / 원소지정번호
indirection		 / 간접화
initalizer		 / 초기치, 초기값(변수 선언문에서) , 초기화식(값보다 동작이 우선할 경우)
internationalization	 / 국제화
iterative call		 / 반복 호출
legacy code		 / 재래식 코드
linkage			 / 링크 관계
local object		 / 지역 객체
locale			 / 로케일
locality of reference    / 참조 지역성
lock			 / 잠금, 락
low-level		 / 저차원의, 하위(부) 수준의
lvalue			 / 좌변값
memory layout		 / 메모리 배치구조
mixin			 / 믹스인
modifier		 / 수식자
modularity		 / 모듈성
mutex			 / 뮤텍스
namespace		 / 네임스페이스
nested			 / 중첩된 , 중첩
new handler		 / new 처리자
non-const		 / 비상수(객체 및 수량 데이터에 대해)
nothrow			 / 예외불가
object code		 / 목적코드(소스가 컴파일된 결과)
object file		 / 목적 파일(소스가 컴파일된 결과)
object			 / 객체
offset			 / 변위, 오프셋
operation		 / 동작, 연산 ,조작
overflow		 / 오버플로
overload(ing)		 / 오버로드(딩), 중복
override		 / 오버라이드 , 재정의
parameter		 / 매게변수
partial assignment	 / 부분 대입
pass			 / 전달하다, 넘기다(매개변수,인자를)
past-the-end		 / 마지막 원소 다음
persistence		 / 지속성
placement new		 / 위치지정 new
pointer			 / 포인터
qualifier		 / 한정자
raw memory		 / 미초기화 메모리, 초기화되지 않은 메모리
redefine		 / 재정의
refernce count(ing)	 / 참조 카운트(팅)
refernce		 / 참조(데이터), 참조(동작)
regular expression	 / 정규 표현식
resource		 / 자원  
return			 / 반환(함수에서 값을 가지고 호출부로 돌아갈 떄), 복귀(돌려주는 값을 가지지 않고 호출부로 돌아갈 때)
runtime type identification / 런타임 타입 식별
rvalue			 / 우변값
scope			 / 유효 범위
side effect		 / 부수 효과
signature		 / 시그너처
slicing			 / 복사손실
smart pointer 		 / 스마트 포인터
specification		 / 명세
stack unwinding		 / 스택 풀기
statement		 / 문, 문장
temporary object	 / 임시 객체
terminate		 / 강제 종료
template argument deduction / 템플릿 인자 추론
thread			 / 스레드
thread safety		 / 스레드 안전성
translation unit	 / 번역 단위
type			 / 타입
unary			 / 단항
underflow		 / 언더 플로
volatileness		 / 휘발성
working set		 / 작업세트













